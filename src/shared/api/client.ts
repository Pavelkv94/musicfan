import createClient, { type Middleware } from "openapi-fetch";
import type { paths } from "./schema"; // generated by openapi-typescript
import { baseUrl, apiKey } from '../config/api-config';
import { accessTokenKey } from '../config/localstorage-keys';
import { refreshTokenKey } from '../config/localstorage-keys';

let refreshPromise: Promise<void> | null = null;

function makeRefreshToken() {
    if (!refreshPromise) {
        refreshPromise = (async (): Promise<void> => {
            const refreshToken = localStorage.getItem(refreshTokenKey);
            if (!refreshToken) {
                throw new Error('No refresh token found');
            }

            const response = await fetch(`${baseUrl}/auth/refresh`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'api-key': apiKey
                },
                body: JSON.stringify({
                    refreshToken
                })
            });

            if (!response.ok) {
                localStorage.removeItem(accessTokenKey);
                localStorage.removeItem(refreshTokenKey);
                throw new Error('Failed to refresh token');
            }

            const data = await response.json();
            localStorage.setItem(accessTokenKey, data.accessToken);
            localStorage.setItem(refreshTokenKey, data.refreshToken);
        })();

        refreshPromise.finally(() => {
            refreshPromise = null;
        });

        return refreshPromise;
    }
}

const myMiddleware: Middleware = {
    async onRequest({ request }) {
        // set "foo" header
        const accessToken = localStorage.getItem('musicfan-accessToken');
        if (accessToken) {
            request.headers.set('Authorization', `Bearer ${accessToken}`);
        }

        //@ts-expect-error save original request to retry it after refresh
        request._retryRequest = request.clone();

        return request;
    },
    async onResponse({ request, response }) {
        if (response.ok) return response;

        if (!response.ok && response.status !== 401) {
            // Will produce error messages like "https://example.org/api/v1/example: 404 Not Found".
            throw new Error(`${response.url}: ${response.status} ${response.statusText}`);
        }
        try {
            await makeRefreshToken();
            //@ts-expect-error get original request to retry it after refresh
            const originalRequest = request._retryRequest;

            const requestInit: RequestInit = {
                method: originalRequest.method,
                headers: new Headers(originalRequest.headers)
            };

            // Only add body and duplex if the original request has a body
            if (originalRequest.body) {
                requestInit.body = originalRequest.body;
                (requestInit as RequestInit & { duplex: string }).duplex = 'half';
            }

            const retryRequest = new Request(originalRequest.url, requestInit);
            retryRequest.headers.set('Authorization', `Bearer ${localStorage.getItem('musicfan-accessToken')}`);
            console.log('retryRequest', retryRequest);
            return fetch(retryRequest);
        } catch (error) {
            console.error(error);
            return response;
        }

        return response;
    }
};

const client = createClient<paths>({
    baseUrl,
    headers: {
        'api-key': 'b24ee7ff-d9a9-4404-bb94-aead42c29c9e'
    }
});

client.use(myMiddleware);

export default client;